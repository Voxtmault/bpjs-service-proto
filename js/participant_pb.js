// source: participant.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.bpjs.BPJSMedicalRecord', null, global);
goog.exportSymbol('proto.bpjs.BPJSParticipant', null, global);
goog.exportSymbol('proto.bpjs.COB', null, global);
goog.exportSymbol('proto.bpjs.Information', null, global);
goog.exportSymbol('proto.bpjs.PatientAge', null, global);
goog.exportSymbol('proto.bpjs.ProvUmum', null, global);
goog.exportSymbol('proto.bpjs.ReusableNote', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bpjs.COB = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bpjs.COB, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bpjs.COB.displayName = 'proto.bpjs.COB';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bpjs.Information = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bpjs.Information, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bpjs.Information.displayName = 'proto.bpjs.Information';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bpjs.BPJSMedicalRecord = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bpjs.BPJSMedicalRecord, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bpjs.BPJSMedicalRecord.displayName = 'proto.bpjs.BPJSMedicalRecord';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bpjs.ProvUmum = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bpjs.ProvUmum, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bpjs.ProvUmum.displayName = 'proto.bpjs.ProvUmum';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bpjs.PatientAge = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bpjs.PatientAge, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bpjs.PatientAge.displayName = 'proto.bpjs.PatientAge';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bpjs.ReusableNote = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bpjs.ReusableNote, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bpjs.ReusableNote.displayName = 'proto.bpjs.ReusableNote';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bpjs.BPJSParticipant = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bpjs.BPJSParticipant, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bpjs.BPJSParticipant.displayName = 'proto.bpjs.BPJSParticipant';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bpjs.COB.prototype.toObject = function(opt_includeInstance) {
  return proto.bpjs.COB.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bpjs.COB} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bpjs.COB.toObject = function(includeInstance, msg) {
  var f, obj = {
    insurancename: jspb.Message.getFieldWithDefault(msg, 1, ""),
    insurancenumber: jspb.Message.getFieldWithDefault(msg, 2, ""),
    tatdate: jspb.Message.getFieldWithDefault(msg, 3, ""),
    tmtdate: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bpjs.COB}
 */
proto.bpjs.COB.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bpjs.COB;
  return proto.bpjs.COB.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bpjs.COB} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bpjs.COB}
 */
proto.bpjs.COB.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setInsurancename(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setInsurancenumber(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTatdate(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTmtdate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bpjs.COB.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bpjs.COB.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bpjs.COB} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bpjs.COB.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInsurancename();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getInsurancenumber();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTatdate();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTmtdate();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string insuranceName = 1;
 * @return {string}
 */
proto.bpjs.COB.prototype.getInsurancename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bpjs.COB} returns this
 */
proto.bpjs.COB.prototype.setInsurancename = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string insuranceNumber = 2;
 * @return {string}
 */
proto.bpjs.COB.prototype.getInsurancenumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.bpjs.COB} returns this
 */
proto.bpjs.COB.prototype.setInsurancenumber = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string tatDate = 3;
 * @return {string}
 */
proto.bpjs.COB.prototype.getTatdate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.bpjs.COB} returns this
 */
proto.bpjs.COB.prototype.setTatdate = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string tmtDate = 4;
 * @return {string}
 */
proto.bpjs.COB.prototype.getTmtdate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.bpjs.COB} returns this
 */
proto.bpjs.COB.prototype.setTmtdate = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bpjs.Information.prototype.toObject = function(opt_includeInstance) {
  return proto.bpjs.Information.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bpjs.Information} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bpjs.Information.toObject = function(includeInstance, msg) {
  var f, obj = {
    dinsos: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sktmnumber: jspb.Message.getFieldWithDefault(msg, 2, ""),
    prolanisprb: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bpjs.Information}
 */
proto.bpjs.Information.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bpjs.Information;
  return proto.bpjs.Information.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bpjs.Information} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bpjs.Information}
 */
proto.bpjs.Information.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDinsos(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSktmnumber(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setProlanisprb(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bpjs.Information.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bpjs.Information.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bpjs.Information} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bpjs.Information.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDinsos();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSktmnumber();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getProlanisprb();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string dinsos = 1;
 * @return {string}
 */
proto.bpjs.Information.prototype.getDinsos = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bpjs.Information} returns this
 */
proto.bpjs.Information.prototype.setDinsos = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string SKTMNumber = 2;
 * @return {string}
 */
proto.bpjs.Information.prototype.getSktmnumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.bpjs.Information} returns this
 */
proto.bpjs.Information.prototype.setSktmnumber = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string prolanisPRB = 3;
 * @return {string}
 */
proto.bpjs.Information.prototype.getProlanisprb = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.bpjs.Information} returns this
 */
proto.bpjs.Information.prototype.setProlanisprb = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bpjs.BPJSMedicalRecord.prototype.toObject = function(opt_includeInstance) {
  return proto.bpjs.BPJSMedicalRecord.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bpjs.BPJSMedicalRecord} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bpjs.BPJSMedicalRecord.toObject = function(includeInstance, msg) {
  var f, obj = {
    mrnumber: jspb.Message.getFieldWithDefault(msg, 1, ""),
    phonenumber: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bpjs.BPJSMedicalRecord}
 */
proto.bpjs.BPJSMedicalRecord.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bpjs.BPJSMedicalRecord;
  return proto.bpjs.BPJSMedicalRecord.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bpjs.BPJSMedicalRecord} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bpjs.BPJSMedicalRecord}
 */
proto.bpjs.BPJSMedicalRecord.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMrnumber(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhonenumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bpjs.BPJSMedicalRecord.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bpjs.BPJSMedicalRecord.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bpjs.BPJSMedicalRecord} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bpjs.BPJSMedicalRecord.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMrnumber();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPhonenumber();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string MRNumber = 1;
 * @return {string}
 */
proto.bpjs.BPJSMedicalRecord.prototype.getMrnumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bpjs.BPJSMedicalRecord} returns this
 */
proto.bpjs.BPJSMedicalRecord.prototype.setMrnumber = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string phoneNumber = 2;
 * @return {string}
 */
proto.bpjs.BPJSMedicalRecord.prototype.getPhonenumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.bpjs.BPJSMedicalRecord} returns this
 */
proto.bpjs.BPJSMedicalRecord.prototype.setPhonenumber = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bpjs.ProvUmum.prototype.toObject = function(opt_includeInstance) {
  return proto.bpjs.ProvUmum.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bpjs.ProvUmum} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bpjs.ProvUmum.toObject = function(includeInstance, msg) {
  var f, obj = {
    providercode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    providername: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bpjs.ProvUmum}
 */
proto.bpjs.ProvUmum.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bpjs.ProvUmum;
  return proto.bpjs.ProvUmum.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bpjs.ProvUmum} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bpjs.ProvUmum}
 */
proto.bpjs.ProvUmum.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProvidercode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProvidername(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bpjs.ProvUmum.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bpjs.ProvUmum.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bpjs.ProvUmum} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bpjs.ProvUmum.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProvidercode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getProvidername();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string providerCode = 1;
 * @return {string}
 */
proto.bpjs.ProvUmum.prototype.getProvidercode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bpjs.ProvUmum} returns this
 */
proto.bpjs.ProvUmum.prototype.setProvidercode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string providerName = 2;
 * @return {string}
 */
proto.bpjs.ProvUmum.prototype.getProvidername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.bpjs.ProvUmum} returns this
 */
proto.bpjs.ProvUmum.prototype.setProvidername = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bpjs.PatientAge.prototype.toObject = function(opt_includeInstance) {
  return proto.bpjs.PatientAge.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bpjs.PatientAge} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bpjs.PatientAge.toObject = function(includeInstance, msg) {
  var f, obj = {
    agenow: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ageatservice: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bpjs.PatientAge}
 */
proto.bpjs.PatientAge.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bpjs.PatientAge;
  return proto.bpjs.PatientAge.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bpjs.PatientAge} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bpjs.PatientAge}
 */
proto.bpjs.PatientAge.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAgenow(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAgeatservice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bpjs.PatientAge.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bpjs.PatientAge.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bpjs.PatientAge} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bpjs.PatientAge.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAgenow();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAgeatservice();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string ageNow = 1;
 * @return {string}
 */
proto.bpjs.PatientAge.prototype.getAgenow = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bpjs.PatientAge} returns this
 */
proto.bpjs.PatientAge.prototype.setAgenow = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string ageAtService = 2;
 * @return {string}
 */
proto.bpjs.PatientAge.prototype.getAgeatservice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.bpjs.PatientAge} returns this
 */
proto.bpjs.PatientAge.prototype.setAgeatservice = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bpjs.ReusableNote.prototype.toObject = function(opt_includeInstance) {
  return proto.bpjs.ReusableNote.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bpjs.ReusableNote} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bpjs.ReusableNote.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, ""),
    note: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bpjs.ReusableNote}
 */
proto.bpjs.ReusableNote.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bpjs.ReusableNote;
  return proto.bpjs.ReusableNote.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bpjs.ReusableNote} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bpjs.ReusableNote}
 */
proto.bpjs.ReusableNote.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNote(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bpjs.ReusableNote.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bpjs.ReusableNote.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bpjs.ReusableNote} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bpjs.ReusableNote.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNote();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string code = 1;
 * @return {string}
 */
proto.bpjs.ReusableNote.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bpjs.ReusableNote} returns this
 */
proto.bpjs.ReusableNote.prototype.setCode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string note = 2;
 * @return {string}
 */
proto.bpjs.ReusableNote.prototype.getNote = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.bpjs.ReusableNote} returns this
 */
proto.bpjs.ReusableNote.prototype.setNote = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bpjs.BPJSParticipant.prototype.toObject = function(opt_includeInstance) {
  return proto.bpjs.BPJSParticipant.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bpjs.BPJSParticipant} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bpjs.BPJSParticipant.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    nik: jspb.Message.getFieldWithDefault(msg, 2, ""),
    cardnumber: jspb.Message.getFieldWithDefault(msg, 3, ""),
    pisa: jspb.Message.getFieldWithDefault(msg, 4, ""),
    sex: jspb.Message.getFieldWithDefault(msg, 5, ""),
    tatdate: jspb.Message.getFieldWithDefault(msg, 6, ""),
    tmtdate: jspb.Message.getFieldWithDefault(msg, 7, ""),
    dob: jspb.Message.getFieldWithDefault(msg, 8, ""),
    cardprintdate: jspb.Message.getFieldWithDefault(msg, 9, ""),
    cob: (f = msg.getCob()) && proto.bpjs.COB.toObject(includeInstance, f),
    classrights: (f = msg.getClassrights()) && proto.bpjs.ReusableNote.toObject(includeInstance, f),
    information: (f = msg.getInformation()) && proto.bpjs.Information.toObject(includeInstance, f),
    participanttype: (f = msg.getParticipanttype()) && proto.bpjs.ReusableNote.toObject(includeInstance, f),
    medicalrecord: (f = msg.getMedicalrecord()) && proto.bpjs.BPJSMedicalRecord.toObject(includeInstance, f),
    provumum: (f = msg.getProvumum()) && proto.bpjs.ProvUmum.toObject(includeInstance, f),
    participantstatus: (f = msg.getParticipantstatus()) && proto.bpjs.ReusableNote.toObject(includeInstance, f),
    age: (f = msg.getAge()) && proto.bpjs.PatientAge.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bpjs.BPJSParticipant}
 */
proto.bpjs.BPJSParticipant.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bpjs.BPJSParticipant;
  return proto.bpjs.BPJSParticipant.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bpjs.BPJSParticipant} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bpjs.BPJSParticipant}
 */
proto.bpjs.BPJSParticipant.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNik(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCardnumber(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPisa(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSex(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setTatdate(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setTmtdate(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setDob(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setCardprintdate(value);
      break;
    case 10:
      var value = new proto.bpjs.COB;
      reader.readMessage(value,proto.bpjs.COB.deserializeBinaryFromReader);
      msg.setCob(value);
      break;
    case 11:
      var value = new proto.bpjs.ReusableNote;
      reader.readMessage(value,proto.bpjs.ReusableNote.deserializeBinaryFromReader);
      msg.setClassrights(value);
      break;
    case 12:
      var value = new proto.bpjs.Information;
      reader.readMessage(value,proto.bpjs.Information.deserializeBinaryFromReader);
      msg.setInformation(value);
      break;
    case 13:
      var value = new proto.bpjs.ReusableNote;
      reader.readMessage(value,proto.bpjs.ReusableNote.deserializeBinaryFromReader);
      msg.setParticipanttype(value);
      break;
    case 14:
      var value = new proto.bpjs.BPJSMedicalRecord;
      reader.readMessage(value,proto.bpjs.BPJSMedicalRecord.deserializeBinaryFromReader);
      msg.setMedicalrecord(value);
      break;
    case 15:
      var value = new proto.bpjs.ProvUmum;
      reader.readMessage(value,proto.bpjs.ProvUmum.deserializeBinaryFromReader);
      msg.setProvumum(value);
      break;
    case 16:
      var value = new proto.bpjs.ReusableNote;
      reader.readMessage(value,proto.bpjs.ReusableNote.deserializeBinaryFromReader);
      msg.setParticipantstatus(value);
      break;
    case 17:
      var value = new proto.bpjs.PatientAge;
      reader.readMessage(value,proto.bpjs.PatientAge.deserializeBinaryFromReader);
      msg.setAge(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bpjs.BPJSParticipant.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bpjs.BPJSParticipant.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bpjs.BPJSParticipant} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bpjs.BPJSParticipant.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNik();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCardnumber();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPisa();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSex();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getTatdate();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getTmtdate();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getDob();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getCardprintdate();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getCob();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.bpjs.COB.serializeBinaryToWriter
    );
  }
  f = message.getClassrights();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.bpjs.ReusableNote.serializeBinaryToWriter
    );
  }
  f = message.getInformation();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.bpjs.Information.serializeBinaryToWriter
    );
  }
  f = message.getParticipanttype();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.bpjs.ReusableNote.serializeBinaryToWriter
    );
  }
  f = message.getMedicalrecord();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.bpjs.BPJSMedicalRecord.serializeBinaryToWriter
    );
  }
  f = message.getProvumum();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.bpjs.ProvUmum.serializeBinaryToWriter
    );
  }
  f = message.getParticipantstatus();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.bpjs.ReusableNote.serializeBinaryToWriter
    );
  }
  f = message.getAge();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.bpjs.PatientAge.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.bpjs.BPJSParticipant.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bpjs.BPJSParticipant} returns this
 */
proto.bpjs.BPJSParticipant.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string nik = 2;
 * @return {string}
 */
proto.bpjs.BPJSParticipant.prototype.getNik = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.bpjs.BPJSParticipant} returns this
 */
proto.bpjs.BPJSParticipant.prototype.setNik = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string cardNumber = 3;
 * @return {string}
 */
proto.bpjs.BPJSParticipant.prototype.getCardnumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.bpjs.BPJSParticipant} returns this
 */
proto.bpjs.BPJSParticipant.prototype.setCardnumber = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string pisa = 4;
 * @return {string}
 */
proto.bpjs.BPJSParticipant.prototype.getPisa = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.bpjs.BPJSParticipant} returns this
 */
proto.bpjs.BPJSParticipant.prototype.setPisa = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string sex = 5;
 * @return {string}
 */
proto.bpjs.BPJSParticipant.prototype.getSex = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.bpjs.BPJSParticipant} returns this
 */
proto.bpjs.BPJSParticipant.prototype.setSex = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string tatDate = 6;
 * @return {string}
 */
proto.bpjs.BPJSParticipant.prototype.getTatdate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.bpjs.BPJSParticipant} returns this
 */
proto.bpjs.BPJSParticipant.prototype.setTatdate = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string tmtDate = 7;
 * @return {string}
 */
proto.bpjs.BPJSParticipant.prototype.getTmtdate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.bpjs.BPJSParticipant} returns this
 */
proto.bpjs.BPJSParticipant.prototype.setTmtdate = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string dob = 8;
 * @return {string}
 */
proto.bpjs.BPJSParticipant.prototype.getDob = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.bpjs.BPJSParticipant} returns this
 */
proto.bpjs.BPJSParticipant.prototype.setDob = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string cardPrintDate = 9;
 * @return {string}
 */
proto.bpjs.BPJSParticipant.prototype.getCardprintdate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.bpjs.BPJSParticipant} returns this
 */
proto.bpjs.BPJSParticipant.prototype.setCardprintdate = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional COB cob = 10;
 * @return {?proto.bpjs.COB}
 */
proto.bpjs.BPJSParticipant.prototype.getCob = function() {
  return /** @type{?proto.bpjs.COB} */ (
    jspb.Message.getWrapperField(this, proto.bpjs.COB, 10));
};


/**
 * @param {?proto.bpjs.COB|undefined} value
 * @return {!proto.bpjs.BPJSParticipant} returns this
*/
proto.bpjs.BPJSParticipant.prototype.setCob = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bpjs.BPJSParticipant} returns this
 */
proto.bpjs.BPJSParticipant.prototype.clearCob = function() {
  return this.setCob(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bpjs.BPJSParticipant.prototype.hasCob = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional ReusableNote classRights = 11;
 * @return {?proto.bpjs.ReusableNote}
 */
proto.bpjs.BPJSParticipant.prototype.getClassrights = function() {
  return /** @type{?proto.bpjs.ReusableNote} */ (
    jspb.Message.getWrapperField(this, proto.bpjs.ReusableNote, 11));
};


/**
 * @param {?proto.bpjs.ReusableNote|undefined} value
 * @return {!proto.bpjs.BPJSParticipant} returns this
*/
proto.bpjs.BPJSParticipant.prototype.setClassrights = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bpjs.BPJSParticipant} returns this
 */
proto.bpjs.BPJSParticipant.prototype.clearClassrights = function() {
  return this.setClassrights(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bpjs.BPJSParticipant.prototype.hasClassrights = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional Information information = 12;
 * @return {?proto.bpjs.Information}
 */
proto.bpjs.BPJSParticipant.prototype.getInformation = function() {
  return /** @type{?proto.bpjs.Information} */ (
    jspb.Message.getWrapperField(this, proto.bpjs.Information, 12));
};


/**
 * @param {?proto.bpjs.Information|undefined} value
 * @return {!proto.bpjs.BPJSParticipant} returns this
*/
proto.bpjs.BPJSParticipant.prototype.setInformation = function(value) {
  return jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bpjs.BPJSParticipant} returns this
 */
proto.bpjs.BPJSParticipant.prototype.clearInformation = function() {
  return this.setInformation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bpjs.BPJSParticipant.prototype.hasInformation = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional ReusableNote participantType = 13;
 * @return {?proto.bpjs.ReusableNote}
 */
proto.bpjs.BPJSParticipant.prototype.getParticipanttype = function() {
  return /** @type{?proto.bpjs.ReusableNote} */ (
    jspb.Message.getWrapperField(this, proto.bpjs.ReusableNote, 13));
};


/**
 * @param {?proto.bpjs.ReusableNote|undefined} value
 * @return {!proto.bpjs.BPJSParticipant} returns this
*/
proto.bpjs.BPJSParticipant.prototype.setParticipanttype = function(value) {
  return jspb.Message.setWrapperField(this, 13, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bpjs.BPJSParticipant} returns this
 */
proto.bpjs.BPJSParticipant.prototype.clearParticipanttype = function() {
  return this.setParticipanttype(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bpjs.BPJSParticipant.prototype.hasParticipanttype = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional BPJSMedicalRecord medicalRecord = 14;
 * @return {?proto.bpjs.BPJSMedicalRecord}
 */
proto.bpjs.BPJSParticipant.prototype.getMedicalrecord = function() {
  return /** @type{?proto.bpjs.BPJSMedicalRecord} */ (
    jspb.Message.getWrapperField(this, proto.bpjs.BPJSMedicalRecord, 14));
};


/**
 * @param {?proto.bpjs.BPJSMedicalRecord|undefined} value
 * @return {!proto.bpjs.BPJSParticipant} returns this
*/
proto.bpjs.BPJSParticipant.prototype.setMedicalrecord = function(value) {
  return jspb.Message.setWrapperField(this, 14, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bpjs.BPJSParticipant} returns this
 */
proto.bpjs.BPJSParticipant.prototype.clearMedicalrecord = function() {
  return this.setMedicalrecord(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bpjs.BPJSParticipant.prototype.hasMedicalrecord = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional ProvUmum provUmum = 15;
 * @return {?proto.bpjs.ProvUmum}
 */
proto.bpjs.BPJSParticipant.prototype.getProvumum = function() {
  return /** @type{?proto.bpjs.ProvUmum} */ (
    jspb.Message.getWrapperField(this, proto.bpjs.ProvUmum, 15));
};


/**
 * @param {?proto.bpjs.ProvUmum|undefined} value
 * @return {!proto.bpjs.BPJSParticipant} returns this
*/
proto.bpjs.BPJSParticipant.prototype.setProvumum = function(value) {
  return jspb.Message.setWrapperField(this, 15, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bpjs.BPJSParticipant} returns this
 */
proto.bpjs.BPJSParticipant.prototype.clearProvumum = function() {
  return this.setProvumum(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bpjs.BPJSParticipant.prototype.hasProvumum = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional ReusableNote participantStatus = 16;
 * @return {?proto.bpjs.ReusableNote}
 */
proto.bpjs.BPJSParticipant.prototype.getParticipantstatus = function() {
  return /** @type{?proto.bpjs.ReusableNote} */ (
    jspb.Message.getWrapperField(this, proto.bpjs.ReusableNote, 16));
};


/**
 * @param {?proto.bpjs.ReusableNote|undefined} value
 * @return {!proto.bpjs.BPJSParticipant} returns this
*/
proto.bpjs.BPJSParticipant.prototype.setParticipantstatus = function(value) {
  return jspb.Message.setWrapperField(this, 16, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bpjs.BPJSParticipant} returns this
 */
proto.bpjs.BPJSParticipant.prototype.clearParticipantstatus = function() {
  return this.setParticipantstatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bpjs.BPJSParticipant.prototype.hasParticipantstatus = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional PatientAge age = 17;
 * @return {?proto.bpjs.PatientAge}
 */
proto.bpjs.BPJSParticipant.prototype.getAge = function() {
  return /** @type{?proto.bpjs.PatientAge} */ (
    jspb.Message.getWrapperField(this, proto.bpjs.PatientAge, 17));
};


/**
 * @param {?proto.bpjs.PatientAge|undefined} value
 * @return {!proto.bpjs.BPJSParticipant} returns this
*/
proto.bpjs.BPJSParticipant.prototype.setAge = function(value) {
  return jspb.Message.setWrapperField(this, 17, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bpjs.BPJSParticipant} returns this
 */
proto.bpjs.BPJSParticipant.prototype.clearAge = function() {
  return this.setAge(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bpjs.BPJSParticipant.prototype.hasAge = function() {
  return jspb.Message.getField(this, 17) != null;
};


goog.object.extend(exports, proto.bpjs);
