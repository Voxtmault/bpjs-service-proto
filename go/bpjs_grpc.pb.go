// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: bpjs.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BPJSServiceClient is the client API for BPJSService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BPJSServiceClient interface {
	SampleService(ctx context.Context, in *SampleServiceRequest, opts ...grpc.CallOption) (*SampleServiceResponse, error)
}

type bPJSServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBPJSServiceClient(cc grpc.ClientConnInterface) BPJSServiceClient {
	return &bPJSServiceClient{cc}
}

func (c *bPJSServiceClient) SampleService(ctx context.Context, in *SampleServiceRequest, opts ...grpc.CallOption) (*SampleServiceResponse, error) {
	out := new(SampleServiceResponse)
	err := c.cc.Invoke(ctx, "/bpjs.BPJSService/SampleService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BPJSServiceServer is the server API for BPJSService service.
// All implementations must embed UnimplementedBPJSServiceServer
// for forward compatibility
type BPJSServiceServer interface {
	SampleService(context.Context, *SampleServiceRequest) (*SampleServiceResponse, error)
	mustEmbedUnimplementedBPJSServiceServer()
}

// UnimplementedBPJSServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBPJSServiceServer struct {
}

func (UnimplementedBPJSServiceServer) SampleService(context.Context, *SampleServiceRequest) (*SampleServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SampleService not implemented")
}
func (UnimplementedBPJSServiceServer) mustEmbedUnimplementedBPJSServiceServer() {}

// UnsafeBPJSServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BPJSServiceServer will
// result in compilation errors.
type UnsafeBPJSServiceServer interface {
	mustEmbedUnimplementedBPJSServiceServer()
}

func RegisterBPJSServiceServer(s grpc.ServiceRegistrar, srv BPJSServiceServer) {
	s.RegisterService(&BPJSService_ServiceDesc, srv)
}

func _BPJSService_SampleService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SampleServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BPJSServiceServer).SampleService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bpjs.BPJSService/SampleService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BPJSServiceServer).SampleService(ctx, req.(*SampleServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BPJSService_ServiceDesc is the grpc.ServiceDesc for BPJSService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BPJSService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bpjs.BPJSService",
	HandlerType: (*BPJSServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SampleService",
			Handler:    _BPJSService_SampleService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bpjs.proto",
}
